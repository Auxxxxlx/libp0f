/*
   p0f - vaguely configurable bits
   -------------------------------

   Copyright (C) 2012 by Michal Zalewski <lcamtuf@coredump.cx>

   Distributed under the terms and conditions of GNU LGPL.

 */

#ifndef _HAVE_CONFIG_H
#define _HAVE_CONFIG_H

#include "types.h"

/********************************************
 * Things you may reasonably want to change *
 ********************************************/

/* Default location of p0f.fp: */

#ifndef FP_FILE
#cmakedefine FP_FILE "@FP_FILE@"
#endif /* !FP_FILE */

/* Initial permissions on log files: */

#ifndef LOG_MODE
#cmakedefine LOG_MODE @LOG_MODE@
#endif /* !LOG_MODE */

/* Initial permissions on API sockets: */

#ifndef API_MODE
#cmakedefine API_MODE @API_MODE@
#endif /* !API_MODE */

/* Default connection and host cache sizes (adjustable via -m): */

#ifndef MAX_HOSTS
#cmakedefine MAX_CONN @MAX_CONN@
#cmakedefine MAX_HOSTS @MAX_HOSTS@
#endif /* !MAX_HOSTS */

/* Default connection and host time limits (adjustable via -t): */

#ifndef HOST_IDLE_LIMIT
#cmakedefine CONN_MAX_AGE @CONN_MAX_AGE@    /* seconds */
#cmakedefine HOST_IDLE_LIMIT @HOST_IDLE_LIMIT@ /* minutes */
#endif /* !HOST_IDLE_LIMIT */

/* Default number of API connections permitted (adjustable via -c): */

#ifndef API_MAX_CONN
#cmakedefine API_MAX_CONN @API_MAX_CONN@
#endif /* !API_MAX_CONN */

/* Maximum TTL distance for non-fuzzy signature matching: */

#ifndef MAX_DIST
#cmakedefine MAX_DIST @MAX_DIST@
#endif /* !MAX_DIST */

/* Detect use-after-free, at the expense of some performance cost: */

#cmakedefine01 CHECK_UAF

/************************
 * Really obscure stuff *
 ************************/

/* Maximum allocator request size (keep well under INT_MAX): */

#cmakedefine MAX_ALLOC @MAX_ALLOC@

/* Percentage of host entries / flows to prune when limits exceeded: */

#cmakedefine KILL_PERCENT @KILL_PERCENT@

/* PCAP snapshot length: */

#cmakedefine SNAPLEN @SNAPLEN@

/* Maximum request, response size to keep per flow: */

#cmakedefine MAX_FLOW_DATA @MAX_FLOW_DATA@

/* Maximum number of TCP options we will process (< 256): */

#cmakedefine MAX_TCP_OPT @MAX_TCP_OPT@

/* Minimum and maximum frequency for timestamp clock (Hz). Note that RFC
   1323 permits 1 - 1000 Hz . At 1000 Hz, the 32-bit counter overflows
   after about 50 days. */

#cmakedefine MIN_TSCALE @MIN_TSCALE@
#cmakedefine MAX_TSCALE @MAX_TSCALE@

/* Minimum and maximum interval (ms) for measuring timestamp progrssion. This
   is used to make sure the timestamps are fresh enough to be of any value,
   and that the measurement is not affected by network performance too
   severely. */

#cmakedefine MIN_TWAIT @MIN_TWAIT@
#cmakedefine MAX_TWAIT @MAX_TWAIT@

/* Time window in which to tolerate timestamps going back slightly or
   otherwise misbehaving during NAT checks (ms): */

#cmakedefine TSTAMP_GRACE @TSTAMP_GRACE@

/* Maximum interval between packets used for TS-based NAT checks (ms): */

#cmakedefine MAX_NAT_TS @MAX_NAT_TS@

/* Minimum port drop to serve as a NAT detection signal: */

#cmakedefine MIN_PORT_DROP @MIN_PORT_DROP@

/* Threshold before letting NAT detection make a big deal out of TTL change
   for remote hosts (this is to account for peering changes): */

#cmakedefine SMALL_TTL_CHG @SMALL_TTL_CHG@

/* The distance up to which the system is considered to be local, and therefore
   the SMALL_TTL_CHG threshold should not be taken account: */

#cmakedefine LOCAL_TTL_LIMIT @LOCAL_TTL_LIMIT@

/* The distance past which the system is considered to be really distant,
   and therefore, changes within SMALL_TTL_CHG should be completely ignored: */

#cmakedefine NEAR_TTL_LIMIT @NEAR_TTL_LIMIT@

/* Number of packet scores to keep for NAT detection (< 256): */

#cmakedefine NAT_SCORES @NAT_SCORES@

/* Number of hash buckets for p0f.fp signatures: */

#cmakedefine SIG_BUCKETS @SIG_BUCKETS@

/* Number of hash buckets for active connections: */

#cmakedefine FLOW_BUCKETS @FLOW_BUCKETS@

/* Number of hash buckets for host data: */

#cmakedefine HOST_BUCKETS @HOST_BUCKETS@

/* Cache expiration interval (every n packets received): */

#cmakedefine EXPIRE_INTERVAL @EXPIRE_INTERVAL@

/* Non-alphanumeric chars to permit in OS names. This is to allow 'sys' syntax
   to be used unambiguously, yet allow some freedom: */

#cmakedefine NAME_CHARS "@NAME_CHARS@"

/* Special window size and MSS used by p0f-sendsyn, and detected by p0f: */

#cmakedefine SPECIAL_MSS @SPECIAL_MSS@
#cmakedefine SPECIAL_WIN @SPECIAL_WIN@

/* Maximum length of an HTTP URL line we're willing to entertain. The same
   limit is also used for the first line of a response: */

#cmakedefine HTTP_MAX_URL @HTTP_MAX_URL@

/* Maximum number of HTTP headers: */

#cmakedefine HTTP_MAX_HDRS @HTTP_MAX_HDRS@

/* Maximum length of a header name: */

#cmakedefine HTTP_MAX_HDR_NAME @HTTP_MAX_HDR_NAME@

/* Maximum length of a header value: */

#cmakedefine HTTP_MAX_HDR_VAL @HTTP_MAX_HDR_VAL@

/* Maximum length of a header value for display purposes: */

#cmakedefine HTTP_MAX_SHOW @HTTP_MAX_SHOW@

/* Maximum HTTP 'Date' progression jitter to overlook (s): */

#cmakedefine HTTP_MAX_DATE_DIFF @HTTP_MAX_DATE_DIFF@

#ifdef _FROM_FP_HTTP

#include "fp_http.h"

/* Headers that should be tagged as optional by the HTTP fingerprinter in any
   generated signatures: */

static struct http_id req_optional[] = {
  { "Cookie", 0 }, 
  { "Referer", 0 },
  { "Origin", 0 },
  { "Range", 0 },
  { "If-Modified-Since", 0 },
  { "If-None-Match", 0 },
  { "Via", 0 },
  { "X-Forwarded-For", 0 },
  { "Authorization", 0 },
  { "Proxy-Authorization", 0 },
  { "Cache-Control", 0 },
  { 0, 0 }
};

static struct http_id resp_optional[] = {
  { "Set-Cookie", 0 },
  { "Last-Modified", 0 },
  { "ETag", 0 },
  { "Content-Length", 0 },
  { "Content-Disposition", 0 },
  { "Cache-Control", 0 },
  { "Expires", 0 },
  { "Pragma", 0 },
  { "Location", 0 },
  { "Refresh", 0 },
  { "Content-Range", 0 },
  { "Vary", 0 },
  { 0, 0 }
};

/* Common headers that are expected to be present at all times, and deserve
   a special mention if absent in a signature: */

static struct http_id req_common[] = {
  { "Host", 0 },
  { "User-Agent", 0 },
  { "Connection", 0 },
  { "Accept", 0 },
  { "Accept-Encoding", 0 },
  { "Accept-Language", 0 },
  { "Accept-Charset", 0 },
  { "Keep-Alive", 0 },
  { 0, 0 }
};

static struct http_id resp_common[] = {
  { "Content-Type", 0 },
  { "Connection", 0 },
  { "Keep-Alive", 0 },
  { "Accept-Ranges", 0 },
  { "Date", 0 },
  { 0, 0 }
};

/* Headers for which values change depending on the context, and therefore
   should not be included in proposed signatures. This is on top of the
   "optional" header lists, which already implies skipping the value. */

static struct http_id req_skipval[] = {
  { "Host", 0 },
  { "User-Agent", 0 },
  { 0, 0 }
};

static struct http_id resp_skipval[] = {
  { "Date", 0 },
  { "Content-Type", 0 },
  { "Server", 0 },
  { 0, 0 }
};

#endif /* _FROM_FP_HTTP */

#endif /* ! _HAVE_CONFIG_H */
